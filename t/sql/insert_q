#!/bin/bash
# . $_u/t/sql/insert

if [[ $# -lt 1 || ! $1 = _ ]]; then
    . "$_sql/sql"
fi

# insert_q -w "sha2, table" -v "'$line', '$table_name'"
insert_q() {
    print_q() {
        [[ 1 -eq 0 ]]
    }
    local run_alt=0
    local what=""
    local if_cond=""
    local OPTIND extra_args
    local tables_arr=()
    local errata=5
    # echo "select_complex $@"
    while getopts 'pae:t:f:w:v:' OPTION; do
        case "$OPTION" in
        p)
            print_q() {
                [[ 1 -eq 1 ]]
            }
            ;;
        a)
            run_alt=1
            ;;
        e)
            errata=$OPTARG
            extra_args="-e $errata $extra_args"
            ;;
        t)
            local db_table="$OPTARG"
            ;;
        f)
            extra_args="$extra_args -f $OPTARG"
            ;;
        w)
            set_what="$OPTARG"
            ;;
        v)
            to_values="$OPTARG"
            ;;
        ?)
            echo "bad argument! arg: $OPTION"
            return 1
            ;;
        esac
    done
    shift "$(($OPTIND - 1))"

    # check set - location|db_file|db_table
    check_all_db_vars || {
        echo "unset db_vars"
    }

    if [[ $run_alt -eq 0 && -z "$db_table" ]]; then
        echo "pass: -t db_table, or set '\$db_table' in env"
        return 1
    fi

    query_p1="INSERT INTO "
    if [[ -n $set_what ]]; then
        query_p2="($set_what)"
    else
        ec_err "\: insert_complex called without -s (set what?)"
        exit
    fi
    if [[ -n $to_values ]]; then
        query_p3="VALUES ($to_values)"
    else
        ec_err "insert_complex called without -v (val1, val2)"
        exit
    fi

    # yes_or_no "insert called continue" || {
    #     return
    # }

    if [[ $run_alt -eq 0 ]]; then
        print_q && ec1 "sql \"
$query_p1 $db_table$query_p2
$query_p3\"
"
        sql "$query_p1 $db_table $query_p2
$query_p3"
        # yes_or_no "checked insert" && {
        #     return
        # }
        return $?
    fi
    echo "huh 315 sql"
    exit
    return
    #     if [[ $run_alt -eq 1 ]]; then
    #         if [[ "${#alt_db_tables[@]}" -gt 0 ]]; then
    #             result=""
    #             found_table="z0"
    #             for table in "${alt_db_tables[@]}"; do
    #                 query="$query_p1 $table
    # $query_p2"
    #                 # echo "table: $table"
    #                 # echo "sql $extra_args \"$query\""
    #                 result=$(sql $extra_args "$query")
    #                 check_error="$?"
    #                 if [[ $check_error -ne 0 ]]; then
    #                     echo "sql error: '$check_error', result: '$result'"
    #                     exit
    #                 fi

    #                 if [[ -n $result ]]; then
    #                     echo "$table|$result"
    #                     return 0
    #                 fi
    #             done
    #         else
    #             ec_err "alt_db_tables variable is unset cannot '-a' run alt checks "
    #             return 1
    #         fi
    #     fi
    # exit
    # if [[ ${#multiple_db_tables[@]} -gt 0 ]]; then
    for table in "${multiple_db_tables[@]}"; do
        result=$(sql $extra_args "$query_p1 FROM $table
$query_p2")
        [[ $? -gt 0 ]] && {
            ec_err "sql failed ($?):$extra_args \"$query_p1 FROM $table$query_p2\""
            exit
        }
        if [[ -n "$result" && ! "$result" = "0" ]]; then
            echo "$result"
            return
        fi
    done
    # echo last 0 if one exists
    [[ -n result ]] && echo "$result"
    # fi
}
# INSERT INTO $db_table (sha2, file_subpath, flip_bit)
# VALUES ('$sha2', '$file_subpath', '1')"
