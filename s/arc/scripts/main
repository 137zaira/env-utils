#!/bin/bash
# x_ "$_s/arc/scripts/main"
# . "$_s/arc/scripts/main"
# sets main db entries of a pair

if [ "$0" = "$BASH_SOURCE" ]; then
    as_source=0
else
    as_source=1
fi

$r_ _ sql iter_complex pmt file file_util
. "$_s/arc/functions/common"

###############################################
# iterates recursively through "$@""
# if identical path is in db mark entry 1
# path not in db, => checks sha
# if sha dne adds filepath/sha to db
# if sha found + file at sha-db path col -> add to colission logs
# if sha exists but assosiative file-path dne update db entry path to new path
###############################################

dry() {
    [[ 0 -eq 1 ]]
}
export errata=5
extra_args=""
skip_dir_arr=""
# for pre-deletion
alt_db_tables=()
run_alt=0
clean_init() {
    [[ 0 -eq 1 ]]
}
while getopts 'ne:cf:l:s:a:u:' OPTION; do
    # [[ $OPTION =~ [^nv] ]] && echo "getopts $OPTION, \$OPTARG: $OPTARG"
    case "$OPTION" in
    h)
        echo "Usage:"
        echo "set db_file or pass with -f"
        echo "set db_table or pass with -t"
        echo "set location or pass with -l"
        exit
        ;;
    n)
        dry() {
            [[ 1 -eq 1 ]]
        }
        extra_args="-n $extra_args"
        ;;
    e)
        errata=$OPTARG
        extra_args="-e $errata"
        ;;
    c)
        clean_init() {
            [[ 1 -eq 1 ]]
        }
        ;;
    f)
        db_file="$OPTARG"
        ;;
    t)
        db_table="$OPTARG"
        ;;
    l)
        location="$OPTARG"
        ;;
    u)
        unify_table="$OPTARG"
        ;;
    s)
        skip_dirs="$OPTARG"
        if [[ -n "$skip_dirs" ]]; then
            extra_args="$extra_args -s $skip_dirs"
        fi
        # echo "skip_dirs: $skip_dirs"
        ;;
    a)
        oIFS="$IFS"
        IFS=$'|'
        alt_db_tables=($OPTARG)
        IFS="$oIFS"
        run_alt=1
        ;;

    ?)
        echo "bad argument! arg: $OPTION"
        exit 1
        ;;
    esac
done
shift "$(($OPTIND - 1))"

add_to_unify_table() {
    if [[ -z "$unify_table" ]]; then
        return
    fi
    count_in_table=$(count_q -t $unify_table -i "sha2 = '$sha'")
    if [[ $count_in_table -eq 0 ]]; then
        output=$(insert_q -t $unify_table -w "sha2, table_name, flip_bit" -v "'$sha', '$db_table', '1'")
        error=$?
        [[ $error -ne 0 ]] && {
            echo "insert_q error: $error, $output"
            exit
        }
        return
    fi
    in_table=$(select_q -t $unify_table -w "table_name" -i "sha2='$sha'")
    error=$?
    [[ $error -ne 0 ]] && {
        echo "select_q error: $error, $in_table"
        exit
    }
    if [[ ! $in_table = $table ]]; then
        output=$(update_q -t $unify_table -s "table_name = '$db_table', flip_bit = '1'" -i "sha2 = '$sha'")
        error=$?
        [[ $error -ne 0 ]] && {
            echo "insert_q error: $error, $output"
            exit
        }
    fi
}

##################### main_file_fn #########################
main_file_fn() {
    file_path="$1"
    # echo "file_path: $file_path"
    file_name="${file_path##*\/}"
    [[ ! "$file_name" == *\.* ]] && return
    ext=${file_name##*.}
    ext0=${ext:0:1}
    ext_=${ext:1}
    if [[ $ext0 == m ]]; then
        if [[ ! $m_exts == *$ext_* ]]; then
            [[ $errata -gt 8 ]] && {
                echo "not an m_ext to check ext: ${ext}"
            }
            ((other_file_count++))
            # exit
            return
        fi
    elif [[ $ext0 == w ]]; then
        if [[ ! $w_exts == *$ext_* ]]; then
            [[ $errata -gt 8 ]] && {
                echo "not an w_ext to check ext: ${ext}"
            }
            ((other_file_count++))
            # exit
            return
        fi
    elif [[ ! $o_exts == *$ext* ]]; then
        [[ $errata -gt 8 ]] && {
            echo "not an o_exts to check ext: ${ext}"
        }
        ((other_file_count++))
        return
    fi
    [[ $errata -gt 6 ]] && {
        echo "file_path: $file_path"
    }
    ((checked_file_count++))
    [[ $errata -gt 4 ]] && [[ $((checked_file_count % 50)) -eq 0 ]] && {
        ec2 "checked files iterated: $checked_file_count"
    }

    # echo "t_subpath: $t_subpath"
    if [[ $t_subpath = "" ]]; then
        file_subpath="$file_name"
    else
        file_subpath="$t_subpath/$file_name"
    fi
    # echo "lookup_or_sha -g @'$file_subpath'"
    lookup_or_sha -g
    [[ -z "$sha" || "${#sha}" -ne 64 ]] && {
        ec_err "Unknown error lookup_or_sha, \$?: $?, sha: $sha"
        exit
    }
    [[ $errata -gt 7 ]] && {
        echo "in_db: $in_db"
        echo "at_path: $at_path"
    }
    found=""
    for table_name in "${p_tabs[@]}"; do
        count_in_table=$(count_q -t $table_name -i "sha2 = '$sha'")
        error=$?
        [[ $error -gt 0 ]] && {
            echo "error: $error, output: $output"
            exit $error
        }
        if [[ $count_in_table -gt 0 ]]; then
            found=$table_name
            break
        fi
    done

    if [[ -n "$found" ]]; then
        echo "found in $found"
        echo "delete copy in ${db_table}@ '$file_path'"
        echo "rm \"$file_path\""
        rm "$file_path"
        [[ $in_db -gt 0 ]] && {
            echo "delete_q -i \"sha2 = '$sha'\""
            delete_q -i "sha2 = '$sha'"
        }
        ((files_deleted++))
        return
    fi

    if [[ $at_path -eq 1 ]]; then
        output=$(update_q $extra_args -s "flip_bit = '1'" -i "file_subpath = '$file_subpath'")
        error=$?
        [[ $error -ne 0 ]] && {
            echo "update_q error: $error, $output"
            exit
        }
        ((files_found_at_same++))
        add_to_unify_table
        return
    fi
    # ####### no db entry for sha, insert ########
    if [[ $in_db -eq 0 ]]; then
        # echo "count 0 f: \"$file_path\""
        [[ $errata -gt 5 ]] && {
            ec1 "insert_q -w \"sha2, file_subpath, flip_bit\" -v \"'$sha', '$file_subpath', '1'\""
        }
        output=$(insert_q -w "sha2, file_subpath, flip_bit" -v "'$sha', '$file_subpath', '1'")
        error=$?
        [[ $error -ne 0 ]] && {
            echo "insert_q error: $error, $output"
            exit
        }
        ((inserted_file_count++))
        add_to_unify_table
        return
    fi

    ########## file is in db other path ##########
    [[ $errata -gt 6 ]] && {
        ec3 "getting path for collision sha"
    }
    other_path=$(select_q -w "file_subpath" -i "sha2 = '$sha'")
    error=$?
    [[ $error -ne 0 ]] && {
        echo "select_q error: $error, $outher_path"
        exit
    }
    if [[ -z "$other_path" ]]; then
        ec_err "sha exists in table: $sha2
but no path is found in db
exiting"
        exit
    fi
    [[ $errata -gt 6 ]] && {
        echo "found other_path in_db: $other_path"
    }
    # file found at db entry, add to col logfile #

    if [[ -f "$location/$other_path" ]]; then
        # [[ $errata -gt 7 ]] &&
        echo "collision (2 files same location)"
        echo "$sha2|$location/$other_path|$file_path" >>"$log_dir/col"
        return
    fi

    # file at db entry DNE so update entry to this filepath
    [[ $errata -gt 7 ]] && {
        ec1 "update_q $extra_args  -s \"file_subpath = '$file_subpath', flip_bit = '1'\" -i \"sha2 = '$sha'\""
    }
    output=$(update_q $extra_args -s "file_subpath = '$file_subpath', flip_bit = '1'" -i "sha2 = '$sha'")
    error=$?
    [[ $error -ne 0 ]] && {
        echo "update_q error: $error, $output"
        exit
    }
    ((files_updated_path++))
    add_to_unify_table
}

if [[ -n "$primary_tables" ]]; then
    read -ra p_tabs <<<"$primary_tables"
else
    p_tabs=()
fi
echo "p_tabs: ${p_tabs[@]}"
read -ra extensions <<<$extensions
m_exts=()
w_exts=()
o_exts=()
for ext in ${extensions[@]}; do
    ext=$(echo "$ext" | sed -E 's/'\''//g')
    ext0=${ext:0:1}
    ext_={ext:1}
    if [[ $ext0 == m ]]; then
        # echo "m ext: ${ext:1}"
        m_exts+=(${ext:1})
    elif [[ $ext0 == w ]]; then
        # echo "w ext: ${ext:1}"
        w_exts+=(${ext:1})
    else
        # echo "ext: ${ext}"
        o_exts+=(${ext})
    fi
done
export m_exts="'${m_exts[@]}'"
export w_exts="'${w_exts[@]}'"
export o_exts="'${o_exts[@]}'"
echo "'main' args init complete"
# echo "m_exts: ${m_exts}"
# echo "w_exts: ${w_exts}"
# echo "o_exts: ${o_exts}"
# exit
if [[ $as_source -eq 1 ]]; then
    echo "main - fns/vars available at prompt::: iter_complex -f main_file_fn -b dir_before_fn -a dir_after_fn \"\$location\""
    return
fi

echo "init_run"
init_run

clean_init && {
    echo ": \"location_clean\" \"$location\""
    location_clean "$location"
    [[ $? -gt 0 ]] && {
        echo "location_clean error: $?"
        exit
    }
}

############# go #############
if [[ $# -gt 0 ]]; then
    ec3 "iter_complex ${extra_args} -f main_file_fn -b dir_before_fn -a dir_after_fn -l \"$location\" -- \"$@\""
    iter_complex ${extra_args} -f main_file_fn -b dir_before_fn -a dir_after_fn -l "$location" -- "$@"
else
    ec3 "iter_complex ${extra_args} -f main_file_fn -b dir_before_fn -a dir_after_fn \"$location\""
    iter_complex ${extra_args} -f main_file_fn -b dir_before_fn -a dir_after_fn "$location"
fi

########### finish ###########
echo "$arc_fn run on '$location' completed"
echo "$_s/arc/scripts/finally"
$_s/arc/scripts/finally
